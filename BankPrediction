{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ea7240a9",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-09-25T03:53:43.018411Z",
     "iopub.status.busy": "2025-09-25T03:53:43.018101Z",
     "iopub.status.idle": "2025-09-25T03:53:45.122746Z",
     "shell.execute_reply": "2025-09-25T03:53:45.121761Z"
    },
    "papermill": {
     "duration": 2.112288,
     "end_time": "2025-09-25T03:53:45.124589",
     "exception": false,
     "start_time": "2025-09-25T03:53:43.012301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s5e8/sample_submission.csv\n",
      "/kaggle/input/playground-series-s5e8/train.csv\n",
      "/kaggle/input/playground-series-s5e8/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88cdb69e",
   "metadata": {
    "papermill": {
     "duration": 0.003814,
     "end_time": "2025-09-25T03:53:45.132710",
     "exception": false,
     "start_time": "2025-09-25T03:53:45.128896",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "38942f23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-25T03:53:45.141671Z",
     "iopub.status.busy": "2025-09-25T03:53:45.141238Z",
     "iopub.status.idle": "2025-09-25T03:53:47.858303Z",
     "shell.execute_reply": "2025-09-25T03:53:47.857395Z"
    },
    "papermill": {
     "duration": 2.723396,
     "end_time": "2025-09-25T03:53:47.860052",
     "exception": false,
     "start_time": "2025-09-25T03:53:45.136656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import mean_squared_error\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "26726a2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-25T03:53:47.868927Z",
     "iopub.status.busy": "2025-09-25T03:53:47.868451Z",
     "iopub.status.idle": "2025-09-25T03:53:51.074974Z",
     "shell.execute_reply": "2025-09-25T03:53:51.073976Z"
    },
    "papermill": {
     "duration": 3.212946,
     "end_time": "2025-09-25T03:53:51.076795",
     "exception": false,
     "start_time": "2025-09-25T03:53:47.863849",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data=pd.read_csv('/kaggle/input/playground-series-s5e8/train.csv')\n",
    "test_data=pd.read_csv('/kaggle/input/playground-series-s5e8/test.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "684f7608",
   "metadata": {
    "papermill": {
     "duration": 0.003785,
     "end_time": "2025-09-25T03:53:51.084748",
     "exception": false,
     "start_time": "2025-09-25T03:53:51.080963",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ed745a10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-25T03:53:51.093403Z",
     "iopub.status.busy": "2025-09-25T03:53:51.093105Z",
     "iopub.status.idle": "2025-09-25T03:53:51.680546Z",
     "shell.execute_reply": "2025-09-25T03:53:51.679505Z"
    },
    "papermill": {
     "duration": 0.593712,
     "end_time": "2025-09-25T03:53:51.682266",
     "exception": false,
     "start_time": "2025-09-25T03:53:51.088554",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 750000 entries, 0 to 749999\n",
      "Data columns (total 18 columns):\n",
      " #   Column     Non-Null Count   Dtype \n",
      "---  ------     --------------   ----- \n",
      " 0   id         750000 non-null  int64 \n",
      " 1   age        750000 non-null  int64 \n",
      " 2   job        750000 non-null  object\n",
      " 3   marital    750000 non-null  object\n",
      " 4   education  750000 non-null  object\n",
      " 5   default    750000 non-null  object\n",
      " 6   balance    750000 non-null  int64 \n",
      " 7   housing    750000 non-null  object\n",
      " 8   loan       750000 non-null  object\n",
      " 9   contact    750000 non-null  object\n",
      " 10  day        750000 non-null  int64 \n",
      " 11  month      750000 non-null  object\n",
      " 12  duration   750000 non-null  int64 \n",
      " 13  campaign   750000 non-null  int64 \n",
      " 14  pdays      750000 non-null  int64 \n",
      " 15  previous   750000 non-null  int64 \n",
      " 16  poutcome   750000 non-null  object\n",
      " 17  y          750000 non-null  int64 \n",
      "dtypes: int64(9), object(9)\n",
      "memory usage: 103.0+ MB\n"
     ]
    }
   ],
   "source": [
    "#Basic details\n",
    "train_data.describe()\n",
    "train_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1216eecd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-25T03:53:51.691555Z",
     "iopub.status.busy": "2025-09-25T03:53:51.690828Z",
     "iopub.status.idle": "2025-09-25T03:53:52.031718Z",
     "shell.execute_reply": "2025-09-25T03:53:52.030666Z"
    },
    "papermill": {
     "duration": 0.347034,
     "end_time": "2025-09-25T03:53:52.033242",
     "exception": false,
     "start_time": "2025-09-25T03:53:51.686208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id           0\n",
       "age          0\n",
       "job          0\n",
       "marital      0\n",
       "education    0\n",
       "default      0\n",
       "balance      0\n",
       "housing      0\n",
       "loan         0\n",
       "contact      0\n",
       "day          0\n",
       "month        0\n",
       "duration     0\n",
       "campaign     0\n",
       "pdays        0\n",
       "previous     0\n",
       "poutcome     0\n",
       "y            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Missing vals\n",
    "train_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ddd69463",
   "metadata": {
    "papermill": {
     "duration": 0.003484,
     "end_time": "2025-09-25T03:53:52.040636",
     "exception": false,
     "start_time": "2025-09-25T03:53:52.037152",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# VDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dd16cc0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-25T03:53:52.049200Z",
     "iopub.status.busy": "2025-09-25T03:53:52.048922Z",
     "iopub.status.idle": "2025-09-25T03:53:52.360187Z",
     "shell.execute_reply": "2025-09-25T03:53:52.359118Z"
    },
    "papermill": {
     "duration": 0.317925,
     "end_time": "2025-09-25T03:53:52.362319",
     "exception": false,
     "start_time": "2025-09-25T03:53:52.044394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='y', ylabel='count'>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Target class balance\n",
    "sns.countplot(x='y',data=train_data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ee17ef8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-25T03:53:52.374106Z",
     "iopub.status.busy": "2025-09-25T03:53:52.373811Z",
     "iopub.status.idle": "2025-09-25T03:53:52.845715Z",
     "shell.execute_reply": "2025-09-25T03:53:52.844670Z"
    },
    "papermill": {
     "duration": 0.480455,
     "end_time": "2025-09-25T03:53:52.847300",
     "exception": false,
     "start_time": "2025-09-25T03:53:52.366845",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='y', y='duration', data=train_data)\n",
    "plt.title(\"Call Duration vs Subscription\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "142568ae",
   "metadata": {
    "papermill": {
     "duration": 0.004733,
     "end_time": "2025-09-25T03:53:52.856997",
     "exception": false,
     "start_time": "2025-09-25T03:53:52.852264",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "84d34711",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-25T03:53:52.867526Z",
     "iopub.status.busy": "2025-09-25T03:53:52.867188Z",
     "iopub.status.idle": "2025-09-25T03:53:52.873617Z",
     "shell.execute_reply": "2025-09-25T03:53:52.872736Z"
    },
    "papermill": {
     "duration": 0.01341,
     "end_time": "2025-09-25T03:53:52.875200",
     "exception": false,
     "start_time": "2025-09-25T03:53:52.861790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Global encoder storage\n",
    "encoders = {}\n",
    "\n",
    "def label_encode(df, f):\n",
    "    df = df.copy()\n",
    "    cat_cols = df.select_dtypes(include='object').columns\n",
    "\n",
    "    if f == 0:\n",
    "        # Fit and transform on training data\n",
    "        for col in cat_cols:\n",
    "            encoders[col] = LabelEncoder()\n",
    "            df[col] = encoders[col].fit_transform(df[col])\n",
    "    else:\n",
    "        # Transform test data using fitted encoders\n",
    "        for col in cat_cols:\n",
    "            if col in encoders:\n",
    "                df[col] = encoders[col].transform(df[col])\n",
    "            else:\n",
    "                raise ValueError(f\"No encoder found for column '{col}' in transform mode.\")\n",
    "    \n",
    "    return df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ee2b59e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-25T03:53:52.885799Z",
     "iopub.status.busy": "2025-09-25T03:53:52.885445Z",
     "iopub.status.idle": "2025-09-25T03:53:53.304698Z",
     "shell.execute_reply": "2025-09-25T03:53:53.303670Z"
    },
    "papermill": {
     "duration": 0.426528,
     "end_time": "2025-09-25T03:53:53.306434",
     "exception": false,
     "start_time": "2025-09-25T03:53:52.879906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train,X_val,y_train,y_val=train_test_split(train_data.drop('y',axis=1),train_data['y'],random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4747f188",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-25T03:53:53.321352Z",
     "iopub.status.busy": "2025-09-25T03:53:53.320562Z",
     "iopub.status.idle": "2025-09-25T03:53:54.719052Z",
     "shell.execute_reply": "2025-09-25T03:53:54.718033Z"
    },
    "papermill": {
     "duration": 1.408361,
     "end_time": "2025-09-25T03:53:54.720637",
     "exception": false,
     "start_time": "2025-09-25T03:53:53.312276",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "encoded_train=label_encode(X_train,0)\n",
    "encoded_val=label_encode(X_val,5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "195460c1",
   "metadata": {
    "papermill": {
     "duration": 0.004544,
     "end_time": "2025-09-25T03:53:54.730372",
     "exception": false,
     "start_time": "2025-09-25T03:53:54.725828",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "169f4747",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-25T03:53:54.740808Z",
     "iopub.status.busy": "2025-09-25T03:53:54.740441Z",
     "iopub.status.idle": "2025-09-25T03:56:26.577379Z",
     "shell.execute_reply": "2025-09-25T03:56:26.576511Z"
    },
    "papermill": {
     "duration": 151.848802,
     "end_time": "2025-09-25T03:56:26.583724",
     "exception": false,
     "start_time": "2025-09-25T03:53:54.734922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(random_state=42)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model=RandomForestClassifier(random_state=42)\n",
    "model.fit(encoded_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "35716529",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-25T03:56:26.594877Z",
     "iopub.status.busy": "2025-09-25T03:56:26.594461Z",
     "iopub.status.idle": "2025-09-25T03:56:32.271126Z",
     "shell.execute_reply": "2025-09-25T03:56:32.269945Z"
    },
    "papermill": {
     "duration": 5.685108,
     "end_time": "2025-09-25T03:56:32.273638",
     "exception": false,
     "start_time": "2025-09-25T03:56:26.588530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred=model.predict(encoded_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b4e08471",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-25T03:56:32.286199Z",
     "iopub.status.busy": "2025-09-25T03:56:32.285883Z",
     "iopub.status.idle": "2025-09-25T03:56:32.293953Z",
     "shell.execute_reply": "2025-09-25T03:56:32.293040Z"
    },
    "papermill": {
     "duration": 0.015853,
     "end_time": "2025-09-25T03:56:32.295453",
     "exception": false,
     "start_time": "2025-09-25T03:56:32.279600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.06833066666666666"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared_error(y_val,y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8098d15d",
   "metadata": {
    "papermill": {
     "duration": 0.00459,
     "end_time": "2025-09-25T03:56:32.305229",
     "exception": false,
     "start_time": "2025-09-25T03:56:32.300639",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4d261459",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-25T03:56:32.317590Z",
     "iopub.status.busy": "2025-09-25T03:56:32.316604Z",
     "iopub.status.idle": "2025-09-25T03:56:39.471093Z",
     "shell.execute_reply": "2025-09-25T03:56:39.470131Z"
    },
    "papermill": {
     "duration": 7.162489,
     "end_time": "2025-09-25T03:56:39.472996",
     "exception": false,
     "start_time": "2025-09-25T03:56:32.310507",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "encoded_test=label_encode(test_data,6)\n",
    "\n",
    "test_proba = model.predict_proba(encoded_test)[:,1]\n",
    "submission = pd.DataFrame({'id':test_data['id'], 'y':test_proba})\n",
    "submission.to_csv('submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 12937777,
     "sourceId": 91719,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 182.696937,
   "end_time": "2025-09-25T03:56:40.299598",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-25T03:53:37.602661",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
